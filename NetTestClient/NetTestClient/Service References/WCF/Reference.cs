//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace NetTestClient.WCF {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserClass", Namespace="http://schemas.datacontract.org/2004/07/NetTestModel")]
    [System.SerializableAttribute()]
    public partial class UserClass : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string uNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string uPassField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string uName {
            get {
                return this.uNameField;
            }
            set {
                if ((object.ReferenceEquals(this.uNameField, value) != true)) {
                    this.uNameField = value;
                    this.RaisePropertyChanged("uName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string uPass {
            get {
                return this.uPassField;
            }
            set {
                if ((object.ReferenceEquals(this.uPassField, value) != true)) {
                    this.uPassField = value;
                    this.RaisePropertyChanged("uPass");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TestClass", Namespace="http://schemas.datacontract.org/2004/07/NetTestModel")]
    [System.SerializableAttribute()]
    public partial class TestClass : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tAnswerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tTitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tAnswer {
            get {
                return this.tAnswerField;
            }
            set {
                if ((object.ReferenceEquals(this.tAnswerField, value) != true)) {
                    this.tAnswerField = value;
                    this.RaisePropertyChanged("tAnswer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tDate {
            get {
                return this.tDateField;
            }
            set {
                if ((object.ReferenceEquals(this.tDateField, value) != true)) {
                    this.tDateField = value;
                    this.RaisePropertyChanged("tDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tText {
            get {
                return this.tTextField;
            }
            set {
                if ((object.ReferenceEquals(this.tTextField, value) != true)) {
                    this.tTextField = value;
                    this.RaisePropertyChanged("tText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string tTitle {
            get {
                return this.tTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.tTitleField, value) != true)) {
                    this.tTitleField = value;
                    this.RaisePropertyChanged("tTitle");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCF.INetTestService")]
    public interface INetTestService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTestService/login", ReplyAction="http://tempuri.org/INetTestService/loginResponse")]
        string login(NetTestClient.WCF.UserClass user);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INetTestService/login", ReplyAction="http://tempuri.org/INetTestService/loginResponse")]
        System.IAsyncResult Beginlogin(NetTestClient.WCF.UserClass user, System.AsyncCallback callback, object asyncState);
        
        string Endlogin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTestService/addTest", ReplyAction="http://tempuri.org/INetTestService/addTestResponse")]
        NetTestClient.WCF.TestClass addTest(NetTestClient.WCF.TestClass tset);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INetTestService/addTest", ReplyAction="http://tempuri.org/INetTestService/addTestResponse")]
        System.IAsyncResult BeginaddTest(NetTestClient.WCF.TestClass tset, System.AsyncCallback callback, object asyncState);
        
        NetTestClient.WCF.TestClass EndaddTest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTestService/getTestDataTable", ReplyAction="http://tempuri.org/INetTestService/getTestDataTableResponse")]
        System.Data.DataTable getTestDataTable();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INetTestService/getTestDataTable", ReplyAction="http://tempuri.org/INetTestService/getTestDataTableResponse")]
        System.IAsyncResult BegingetTestDataTable(System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndgetTestDataTable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTestService/deleteTest", ReplyAction="http://tempuri.org/INetTestService/deleteTestResponse")]
        bool deleteTest(NetTestClient.WCF.TestClass test);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INetTestService/deleteTest", ReplyAction="http://tempuri.org/INetTestService/deleteTestResponse")]
        System.IAsyncResult BegindeleteTest(NetTestClient.WCF.TestClass test, System.AsyncCallback callback, object asyncState);
        
        bool EnddeleteTest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTestService/getUserTestDataTable", ReplyAction="http://tempuri.org/INetTestService/getUserTestDataTableResponse")]
        System.Data.DataTable getUserTestDataTable();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INetTestService/getUserTestDataTable", ReplyAction="http://tempuri.org/INetTestService/getUserTestDataTableResponse")]
        System.IAsyncResult BegingetUserTestDataTable(System.AsyncCallback callback, object asyncState);
        
        System.Data.DataTable EndgetUserTestDataTable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INetTestService/setUserMark", ReplyAction="http://tempuri.org/INetTestService/setUserMarkResponse")]
        int setUserMark(int mValue);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/INetTestService/setUserMark", ReplyAction="http://tempuri.org/INetTestService/setUserMarkResponse")]
        System.IAsyncResult BeginsetUserMark(int mValue, System.AsyncCallback callback, object asyncState);
        
        int EndsetUserMark(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INetTestServiceChannel : NetTestClient.WCF.INetTestService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class loginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public loginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class addTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public addTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public NetTestClient.WCF.TestClass Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((NetTestClient.WCF.TestClass)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getTestDataTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getTestDataTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class deleteTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public deleteTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getUserTestDataTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getUserTestDataTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Data.DataTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class setUserMarkCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public setUserMarkCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NetTestServiceClient : System.ServiceModel.ClientBase<NetTestClient.WCF.INetTestService>, NetTestClient.WCF.INetTestService {
        
        private BeginOperationDelegate onBeginloginDelegate;
        
        private EndOperationDelegate onEndloginDelegate;
        
        private System.Threading.SendOrPostCallback onloginCompletedDelegate;
        
        private BeginOperationDelegate onBeginaddTestDelegate;
        
        private EndOperationDelegate onEndaddTestDelegate;
        
        private System.Threading.SendOrPostCallback onaddTestCompletedDelegate;
        
        private BeginOperationDelegate onBegingetTestDataTableDelegate;
        
        private EndOperationDelegate onEndgetTestDataTableDelegate;
        
        private System.Threading.SendOrPostCallback ongetTestDataTableCompletedDelegate;
        
        private BeginOperationDelegate onBegindeleteTestDelegate;
        
        private EndOperationDelegate onEnddeleteTestDelegate;
        
        private System.Threading.SendOrPostCallback ondeleteTestCompletedDelegate;
        
        private BeginOperationDelegate onBegingetUserTestDataTableDelegate;
        
        private EndOperationDelegate onEndgetUserTestDataTableDelegate;
        
        private System.Threading.SendOrPostCallback ongetUserTestDataTableCompletedDelegate;
        
        private BeginOperationDelegate onBeginsetUserMarkDelegate;
        
        private EndOperationDelegate onEndsetUserMarkDelegate;
        
        private System.Threading.SendOrPostCallback onsetUserMarkCompletedDelegate;
        
        public NetTestServiceClient() {
        }
        
        public NetTestServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NetTestServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NetTestServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NetTestServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<loginCompletedEventArgs> loginCompleted;
        
        public event System.EventHandler<addTestCompletedEventArgs> addTestCompleted;
        
        public event System.EventHandler<getTestDataTableCompletedEventArgs> getTestDataTableCompleted;
        
        public event System.EventHandler<deleteTestCompletedEventArgs> deleteTestCompleted;
        
        public event System.EventHandler<getUserTestDataTableCompletedEventArgs> getUserTestDataTableCompleted;
        
        public event System.EventHandler<setUserMarkCompletedEventArgs> setUserMarkCompleted;
        
        public string login(NetTestClient.WCF.UserClass user) {
            return base.Channel.login(user);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult Beginlogin(NetTestClient.WCF.UserClass user, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginlogin(user, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string Endlogin(System.IAsyncResult result) {
            return base.Channel.Endlogin(result);
        }
        
        private System.IAsyncResult OnBeginlogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            NetTestClient.WCF.UserClass user = ((NetTestClient.WCF.UserClass)(inValues[0]));
            return this.Beginlogin(user, callback, asyncState);
        }
        
        private object[] OnEndlogin(System.IAsyncResult result) {
            string retVal = this.Endlogin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnloginCompleted(object state) {
            if ((this.loginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.loginCompleted(this, new loginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void loginAsync(NetTestClient.WCF.UserClass user) {
            this.loginAsync(user, null);
        }
        
        public void loginAsync(NetTestClient.WCF.UserClass user, object userState) {
            if ((this.onBeginloginDelegate == null)) {
                this.onBeginloginDelegate = new BeginOperationDelegate(this.OnBeginlogin);
            }
            if ((this.onEndloginDelegate == null)) {
                this.onEndloginDelegate = new EndOperationDelegate(this.OnEndlogin);
            }
            if ((this.onloginCompletedDelegate == null)) {
                this.onloginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnloginCompleted);
            }
            base.InvokeAsync(this.onBeginloginDelegate, new object[] {
                        user}, this.onEndloginDelegate, this.onloginCompletedDelegate, userState);
        }
        
        public NetTestClient.WCF.TestClass addTest(NetTestClient.WCF.TestClass tset) {
            return base.Channel.addTest(tset);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginaddTest(NetTestClient.WCF.TestClass tset, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginaddTest(tset, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public NetTestClient.WCF.TestClass EndaddTest(System.IAsyncResult result) {
            return base.Channel.EndaddTest(result);
        }
        
        private System.IAsyncResult OnBeginaddTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            NetTestClient.WCF.TestClass tset = ((NetTestClient.WCF.TestClass)(inValues[0]));
            return this.BeginaddTest(tset, callback, asyncState);
        }
        
        private object[] OnEndaddTest(System.IAsyncResult result) {
            NetTestClient.WCF.TestClass retVal = this.EndaddTest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnaddTestCompleted(object state) {
            if ((this.addTestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.addTestCompleted(this, new addTestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void addTestAsync(NetTestClient.WCF.TestClass tset) {
            this.addTestAsync(tset, null);
        }
        
        public void addTestAsync(NetTestClient.WCF.TestClass tset, object userState) {
            if ((this.onBeginaddTestDelegate == null)) {
                this.onBeginaddTestDelegate = new BeginOperationDelegate(this.OnBeginaddTest);
            }
            if ((this.onEndaddTestDelegate == null)) {
                this.onEndaddTestDelegate = new EndOperationDelegate(this.OnEndaddTest);
            }
            if ((this.onaddTestCompletedDelegate == null)) {
                this.onaddTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnaddTestCompleted);
            }
            base.InvokeAsync(this.onBeginaddTestDelegate, new object[] {
                        tset}, this.onEndaddTestDelegate, this.onaddTestCompletedDelegate, userState);
        }
        
        public System.Data.DataTable getTestDataTable() {
            return base.Channel.getTestDataTable();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetTestDataTable(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetTestDataTable(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndgetTestDataTable(System.IAsyncResult result) {
            return base.Channel.EndgetTestDataTable(result);
        }
        
        private System.IAsyncResult OnBegingetTestDataTable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetTestDataTable(callback, asyncState);
        }
        
        private object[] OnEndgetTestDataTable(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndgetTestDataTable(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetTestDataTableCompleted(object state) {
            if ((this.getTestDataTableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getTestDataTableCompleted(this, new getTestDataTableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getTestDataTableAsync() {
            this.getTestDataTableAsync(null);
        }
        
        public void getTestDataTableAsync(object userState) {
            if ((this.onBegingetTestDataTableDelegate == null)) {
                this.onBegingetTestDataTableDelegate = new BeginOperationDelegate(this.OnBegingetTestDataTable);
            }
            if ((this.onEndgetTestDataTableDelegate == null)) {
                this.onEndgetTestDataTableDelegate = new EndOperationDelegate(this.OnEndgetTestDataTable);
            }
            if ((this.ongetTestDataTableCompletedDelegate == null)) {
                this.ongetTestDataTableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetTestDataTableCompleted);
            }
            base.InvokeAsync(this.onBegingetTestDataTableDelegate, null, this.onEndgetTestDataTableDelegate, this.ongetTestDataTableCompletedDelegate, userState);
        }
        
        public bool deleteTest(NetTestClient.WCF.TestClass test) {
            return base.Channel.deleteTest(test);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegindeleteTest(NetTestClient.WCF.TestClass test, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindeleteTest(test, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EnddeleteTest(System.IAsyncResult result) {
            return base.Channel.EnddeleteTest(result);
        }
        
        private System.IAsyncResult OnBegindeleteTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            NetTestClient.WCF.TestClass test = ((NetTestClient.WCF.TestClass)(inValues[0]));
            return this.BegindeleteTest(test, callback, asyncState);
        }
        
        private object[] OnEnddeleteTest(System.IAsyncResult result) {
            bool retVal = this.EnddeleteTest(result);
            return new object[] {
                    retVal};
        }
        
        private void OndeleteTestCompleted(object state) {
            if ((this.deleteTestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.deleteTestCompleted(this, new deleteTestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void deleteTestAsync(NetTestClient.WCF.TestClass test) {
            this.deleteTestAsync(test, null);
        }
        
        public void deleteTestAsync(NetTestClient.WCF.TestClass test, object userState) {
            if ((this.onBegindeleteTestDelegate == null)) {
                this.onBegindeleteTestDelegate = new BeginOperationDelegate(this.OnBegindeleteTest);
            }
            if ((this.onEnddeleteTestDelegate == null)) {
                this.onEnddeleteTestDelegate = new EndOperationDelegate(this.OnEnddeleteTest);
            }
            if ((this.ondeleteTestCompletedDelegate == null)) {
                this.ondeleteTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndeleteTestCompleted);
            }
            base.InvokeAsync(this.onBegindeleteTestDelegate, new object[] {
                        test}, this.onEnddeleteTestDelegate, this.ondeleteTestCompletedDelegate, userState);
        }
        
        public System.Data.DataTable getUserTestDataTable() {
            return base.Channel.getUserTestDataTable();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetUserTestDataTable(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetUserTestDataTable(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Data.DataTable EndgetUserTestDataTable(System.IAsyncResult result) {
            return base.Channel.EndgetUserTestDataTable(result);
        }
        
        private System.IAsyncResult OnBegingetUserTestDataTable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetUserTestDataTable(callback, asyncState);
        }
        
        private object[] OnEndgetUserTestDataTable(System.IAsyncResult result) {
            System.Data.DataTable retVal = this.EndgetUserTestDataTable(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetUserTestDataTableCompleted(object state) {
            if ((this.getUserTestDataTableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getUserTestDataTableCompleted(this, new getUserTestDataTableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getUserTestDataTableAsync() {
            this.getUserTestDataTableAsync(null);
        }
        
        public void getUserTestDataTableAsync(object userState) {
            if ((this.onBegingetUserTestDataTableDelegate == null)) {
                this.onBegingetUserTestDataTableDelegate = new BeginOperationDelegate(this.OnBegingetUserTestDataTable);
            }
            if ((this.onEndgetUserTestDataTableDelegate == null)) {
                this.onEndgetUserTestDataTableDelegate = new EndOperationDelegate(this.OnEndgetUserTestDataTable);
            }
            if ((this.ongetUserTestDataTableCompletedDelegate == null)) {
                this.ongetUserTestDataTableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetUserTestDataTableCompleted);
            }
            base.InvokeAsync(this.onBegingetUserTestDataTableDelegate, null, this.onEndgetUserTestDataTableDelegate, this.ongetUserTestDataTableCompletedDelegate, userState);
        }
        
        public int setUserMark(int mValue) {
            return base.Channel.setUserMark(mValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsetUserMark(int mValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetUserMark(mValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndsetUserMark(System.IAsyncResult result) {
            return base.Channel.EndsetUserMark(result);
        }
        
        private System.IAsyncResult OnBeginsetUserMark(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int mValue = ((int)(inValues[0]));
            return this.BeginsetUserMark(mValue, callback, asyncState);
        }
        
        private object[] OnEndsetUserMark(System.IAsyncResult result) {
            int retVal = this.EndsetUserMark(result);
            return new object[] {
                    retVal};
        }
        
        private void OnsetUserMarkCompleted(object state) {
            if ((this.setUserMarkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setUserMarkCompleted(this, new setUserMarkCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setUserMarkAsync(int mValue) {
            this.setUserMarkAsync(mValue, null);
        }
        
        public void setUserMarkAsync(int mValue, object userState) {
            if ((this.onBeginsetUserMarkDelegate == null)) {
                this.onBeginsetUserMarkDelegate = new BeginOperationDelegate(this.OnBeginsetUserMark);
            }
            if ((this.onEndsetUserMarkDelegate == null)) {
                this.onEndsetUserMarkDelegate = new EndOperationDelegate(this.OnEndsetUserMark);
            }
            if ((this.onsetUserMarkCompletedDelegate == null)) {
                this.onsetUserMarkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetUserMarkCompleted);
            }
            base.InvokeAsync(this.onBeginsetUserMarkDelegate, new object[] {
                        mValue}, this.onEndsetUserMarkDelegate, this.onsetUserMarkCompletedDelegate, userState);
        }
    }
}
